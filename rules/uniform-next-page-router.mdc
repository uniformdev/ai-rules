---
description: 
globs: 
alwaysApply: false
---

[uniform.mdc](mdc:.cursor/rules/uniform.mdc) describes general Uniform principles and practices.
[uniform-sdk.mdc](mdc:.cursor/rules/uniform-sdk.mdc) describes framework-agnostic developer principles.
[uniform-context-sdk.mdc](mdc:references/uniform-context-sdk.mdc) describes personalization and a/b testing developer practices.

### Required npm packages

The following npm packages must be installed to wire Uniform CMS to Next Page Router:

@uniformdev/canvas
@uniformdev/canvas-react
@uniformdev/canvas-next
@uniformdev/context-react

### Fetching and rendering the composition

In your dynamic catch-all route file (`pages/[[...path]].{tsx|jsx}`), it is necessary to fetch the Uniform composition instance for the current route. This is done for server-side rendering using the `withUniformGetServerSideProps` function:

```tsx
import type { UniformCompositionNextPage } from "@uniformdev/canvas-next";
import { withUniformGetServerSideProps } from "@uniformdev/canvas-next/route";
import { UniformComposition } from "@uniformdev/canvas-react";

// fetch the composition using SSR
export const getServerSideProps = withUniformGetServerSideProps();

// the function provides the composition to the route component as the `data` prop
// the UniformCompositionNextPage type provides typings to make sure that is clear
const page: UniformCompositionNextPage = ({ data }) => {
  // the UniformComposition component takes over rendering the components on the composition data
  return <UniformComposition data={data} />;
};

export { page as default };
```

### Rendering Uniform Components using React Components

> IMPORTANT: before generating Uniform component code, always fetch available component definitions from Uniform to be aware of the schema.

The `UniformComposition` component needs to know how to map a Uniform Component instance's `type` to a React component that implements the UI for that component. This is done using the Component Registry. To use the component registry, create a component and register it:

`components/Hero.tsx`:

```tsx
import { registerUniformComponent } from "@uniformdev/canvas-react";

function Hero() {
  return <div>Hero Component Content</div>;
}

registerUniformComponent({
  type: "hero",
  component: Hero,
});
```
Conventionally Uniform components (like Hero.tsx above) are imported to a barrel file in `components/uniformComponents.ts` (e.g. `import 'componentFileName';`), and that barrel file is imported into `_app.tsx` (e.g. `import '../components/uniformComponents';`) to ensure the registrations are processed.

#### Mapping Uniform Components to React Components

React components that receive Uniform Component data are passed props that correspond to the shape of the component definition they render. The `ComponentProps` type can be used to make the mapping explicit:

```tsx
import {
  AssetParamValue,
  LinkParamValue,
  RichTextParamValue,
} from "@uniformdev/canvas";

type HeroProps = ComponentProps<{
  textParameter?: string;
  richTextParameter?: RichTextParamValue;
  linkParameter?: LinkParamValue;
  assetParameter?: AssetParamValue;
  // it is critical that all parameter props values are optional, because they can be undefined - even if 'required' on the component definition
}>;

function Hero(props: HeroProps) {
  return <div>{props.textParameter}</div>;
}
```

#### Rendering child slots

If a Uniform Component definition has slots defined, the components in those slots can be rendered using the `UniformSlot` component.

```tsx
import { UniformSlot } from "@uniformdev/canvas-react";

function Hero() {
  return (
    <div>
      <div>
        <UniformSlot name="start" />
      </div>
      <div>
        <UniformSlot name="end" />
      </div>
    </div>
  );
}
```

#### Rendering parameter/field values

##### Text parameters/fields

When rendering a `text` type parameter, always use the `UniformText` component to render the value. This will enable authors to edit the value within the Uniform preview directly. Text parameters that do not have a visible component, such as alt text, should be rendered as their raw text value:

```tsx
import { UniformText } from "@uniformdev/canvas-react";

function Hero() {
  return (
    <div>
      {/* always specify placeholder text that an author will see in the visual editor when the value is empty */}
      <UniformText parameterId="textParameter" placeholder="Enter text" />
      {/* optionally you can specify a className or wrapping tag, as well as placeholder text that an author will see in the visual editor when the value is empty */}
      <UniformText parameterId="textParameter" as="h1" className="excellent" placeholder="Enter text" />
    </div>
  );
}
```

##### Rich text parameters/fields

For richText parameters, always use the `UniformRichText` component to automatically render the rich text (stored as Lexical JSON) to HTML:

```tsx
import { UniformRichText } from "@uniformdev/canvas-react";

function Hero() {
  return (
    <div>
      <UniformRichText parameterId="richTextParameter" placeholder="Prompt for author when value is empty" />
    </div>
  );
}
```

##### Asset parameters/fields

When rendering asset parameters, use the `flattenValues` helper to simplify value access:

```tsx
import { AssetParamValue, flattenValues } from "@uniformdev/canvas";

interface MyComponentProps {
  multipleImagesAssetParam: AssetParamValue;
  singleImageAssetParam: AssetParamValue;
}

function MyComponent({
  multipleImagesAssetParam,
  singleImageAssetParam,
}: MyComponentProps) {
  // when multiple assets are allowed, flatten to an array
  const images = flattenValues(multipleImagesAssetParam);
  // when only one asset is allowed, flatten to a single object
  const image = flattenValues(singleImageAssetParam, { toSingle: true });

  return (
    <>
      {images?.map((img, index) => (
        <img key={index} src={img?.url} width={img?.width} height={img?.height} />
      ))}
      <img src={image?.url} width={image?.width} height={image?.height} />
    </>
  );
}
```

### Configuring Contextual Editing Live Preview

To enable contextual editing and live preview to operate within the Uniform application, we need to register a _preview handler_ and _playground page_. The preview handler is an API endpoint that Uniform invokes when preview starts. It is responsible for mapping the composition ID under preview to a redirect to the correct frontend route to display that composition. The default handler does this using project map hierarchy.

`pages/api/preview.ts`:

```tsx
import { createPreviewHandler } from "@uniformdev/canvas-next";

const handler = createPreviewHandler({
  // this is set in .env to an arbitrary value
  secret: () => process.env.UNIFORM_PREVIEW_SECRET,
  // optionally configure the playground route to enable previewing patterns
  playgroundPath: "/playground",
});

export default handler;
```

The preview playground is a special route used to preview Uniform Patterns (reusable chunks of a page). The playground route includes the global page shell of the application:

`pages/playground.tsx`:

```tsx
import { UniformPlayground } from "@uniformdev/canvas-react";

export default function Playground() {
  // wrap UniformPlayground in your page shell/styles to wrap the pattern previews with
  return <UniformPlayground behaviorTracking="onLoad" />;
}
```

## Configuring Personalization and A/B Testing (Uniform Context)

### Required Context Packages

The following npm packages must be installed to enable Uniform Context on Next Page Router:

@uniformdev/context
@uniformdev/context-next
@uniformdev/context-react
@uniformdev/cli (IMPORTANT: this package must be installed as a devDependency)

### Pulling the Uniform Context Manifest

Uniform Context relies on a static _manifest_ that defines user classification criteria and active test names. This manifest is downloaded using an API endpoint to a local file that is built into the application. The following package.json script can be used to invoke the manifest download:

```json
"uniform:pull:manifest": "uniform context manifest download --output ./src/uniform/contextManifest.json"
```
The "dev" and "build" npm scripts should run "uniform:pull:manifest" before beginning their regular tasks.

### Enable Uniform Context SDK

In order to initialize Uniform Context, we need to configure it and provide the manifest to it:

`src/uniform/createUniformContext.ts`:

```tsx
import {
  Context,
  ManifestV2,
  ContextPlugin,
  enableDebugConsoleLogDrain,
  enableContextDevTools
} from "@uniformdev/context";
import { NextCookieTransitionDataStore } from "@uniformdev/context-next";
import { NextPageContext } from "next";
import manifest from "./contextManifest.json";

export function createUniformContext(
  serverContext?: NextPageContext
): Context {
  const plugins: ContextPlugin[] = [
    // optional, but smart defaults to help with debugging setup
    enableContextDevTools(),
    enableDebugConsoleLogDrain("debug"),
  ];

  const context = new Context({
    // disables needing visitor consent before storing data (for testing)
    defaultConsent: true,
    manifest: manifest as ManifestV2,
    transitionStore: new NextCookieTransitionDataStore({
      serverContext,
    }),
    plugins,
  });

  return context;
}
```

The context instance must then be provided to the `_app.tsx` so Uniform knows about it when rendering:

`pages/_app.tsx`:
```tsx
import { UniformContext } from "@uniformdev/context-react";
import { UniformAppProps } from "@uniformdev/context-next";
import { createUniformContext } from "../uniform/createUniformContext";

const clientContext = createUniformContext();

function MyApp({
  Component,
  pageProps,
  serverUniformContext,
}: UniformAppProps) {
  return (
    <UniformContext
      context={serverUniformContext ?? clientContext}
      outputType={"standard"}
    >
      <Component {...pageProps} />
    </UniformContext>
  );
}

export default MyApp;
```

We must also configure the server-side Uniform Context instance when using server-side rendering:

`pages/_document.tsx`:
```tsx
import { enableNextSsr } from "@uniformdev/context-next";
import { createUniformContext } from "../uniform/uniformContext";

  // required to enable SSR personalization
  static async getInitialProps(
    ctx: DocumentContext
  ): Promise<DocumentInitialProps> {
    const serverTracker = createUniformContext(ctx);
    enableNextSsr(ctx, serverTracker);
    return await Document.getInitialProps(ctx);
  }
```

CRITICAL! Ignore this if using Next.js app router. This is for page router only. When adding Uniform SDK only for Next.js page router, always add these npm scripts to package.json. Adapt the path to `contextManifest.json` as needed. Add `uniform:manifest` to the `dev` and `build` scripts so it is running before the dev server starts or before production build runs.

```bash
  "uniform:manifest": "uniform context manifest download --output ./lib/uniform/contextManifest.json",
  "uniform:publish": "uniform context manifest publish"
```
